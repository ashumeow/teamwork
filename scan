#!/usr/bin/env python

import os
import json
from datetime import date, timedelta

from config import configer
from db.driver import Driver
from scanner import contributions, leaderboard

MEMBERS_PATH = os.path.join(os.path.dirname(__file__), './raw/members.json')
MEMBERS_FILE = os.path.abspath(MEMBERS_PATH)


def organization_contributions(driver, field='repository_pushed_at'):
    """save analysed data for an organization

    :param driver: instance of :class: Driver
    :param field: (optional) str: field name which contains 'authored time'
    """

    start = date.today() - timedelta(days=365)

    time_series = driver.raw_ref.with_fields(field).order_by(field).run()
    org_data = contributions.contributions(time_series, start, 'organization')

    driver.create_table('contributions')
    driver.insert('contributions', org_data)


def member_contributions(driver, field='repository_pushed_at'):
    """save analysed data for a member

    :param driver: instance of :class: Driver
    :param field: (optional) str: field name which contains 'authored time'
    """

    start = date.today() - timedelta(days=365)

    with open(MEMBERS_FILE, 'r') as f:
        members = json.loads(f.read())
        f.close()

    for member in members:
        time_series = driver.raw_ref.filter(
            {'user': member}).with_fields(field).order_by(field).run()
        member_data = contributions.contributions(time_series, start, member)

        driver.insert('contributions', member_data)


def repo_leaderboard(driver, field='repository_name'):
    """save repositories frequency in organization's commit data

    :param driver: instance of :class: Driver
    :param field: (optional) str: field name which contains repository name
    """

    time_series = driver.raw_ref.with_fields(field).order_by(field).run()

    repo_data = leaderboard.repo_frequency(time_series)

    driver.create_table('repositories')
    driver.insert('repositories', repo_data)


def main():
    config = configer.config('teamwork')

    driver = Driver(config)
    driver.connect()

    organization_contributions(driver)

    member_contributions(driver)

    repo_leaderboard(driver)

    driver.disconnect()

if __name__ == '__main__':
    main()
